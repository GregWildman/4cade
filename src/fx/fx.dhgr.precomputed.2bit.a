;license:MIT
;(c) 2019-2020 by 4am
;
         !source "src/fx/fx.hgr.precomputed.2bit.a"

!macro FX_PRECOMPUTED_2BIT_DHGR .coords {
         jsr   iBuildDHGRSparseBitmasks2Bit
         jsr   iBuildHGRTables
         jsr   iBuildDHGRMirrorCols
         +COPY_TO_0 start, end
         jmp   InputLoop

start
!pseudopc 0 {
Exit2Bit rts
InputLoop
         ldy   #0
input=*+1
         ldx   .coords               ; first value: HGR row + 1
         beq   Exit2Bit              ; if 0 then we're done
         +ROW_X_TO_2BIT_BASE_ADDRESSES src1, src2, dest1, dest2

         inc   <input
         lda   (<input), y
         +HIGH_3_LOW_5 input

         ; main 2x2 block in left half
         clc
-        lda   copymasks2bit, x
         beq   +
src1=*+1
         lda   $FDFD, y
         eor   (<dest1), y
         and   copymasks2bit, x
         eor   (<dest1), y
dest1=*+1
         sta   $FDFD, y
src2=*+1
         lda   $FDFD, y
         eor   (<dest2), y
         and   copymasks2bit, x
         eor   (<dest2), y
dest2=*+1
         sta   $FDFD, y
+        bcs   +
         sta   $C003
         sta   $C005
         sec
         bcs   -
+        sta   $C002
         sta   $C004

         ; corresponding 2x2 block in right half (same row, opposite column)
         lda   mirror_cols, y
         tay
         clc
-        lda   mirror_copymasks2bit, x
         beq   +
         +COPY_BIT src1, dest1, mirror_copymasks2bit
         +COPY_BIT src2, dest2, mirror_copymasks2bit
+        bcs   +
         sta   $C003
         sta   $C005
         sec
         bcs   -
+        sta   $C002
         sta   $C004

         inc   <input
         +LBNE InputLoop
         bit   $c000
         bmi   +
         inc   <input+1
         jmp   InputLoop
+        rts
}
end
}

!macro FX_PRECOMPUTED_2BIT_DHGR_DITHER .coords, .endcoords {
         jsr   iBuildDHGRDitherMasks
         jsr   iBuildDHGRSparseBitmasks2Bit
         jsr   iBuildHGRTables
         jsr   iBuildDHGRMirrorCols

         ; phase 1 - in reverse, with additional masking (dithering)
         jsr   copytozp

         ; set up starting coordinate for reading coordinates in reverse order
         +LDADDR .endcoords-2
         sta   <input
         sty   <input+1

         ; set up EOF marker to stop reading coordinates in reverse order
         lda   #$00
         sta   .coords-2

         ; set up logic to advance to next coordinates in reverse order
         ldx   #(next2_end-next2_start-1)
-        lda   next2_start, x
         sta   <next, x
         dex
         bpl   -

         jsr   InputLoop

         bit   KBD
         bmi   start

         ; phase 2 - in order, without additional masking
         jsr   copytozp

         ; redirect additional masking pointers to an array that contains #$FFs (so no dithering)
         lda   #<no_masks
         sta   <evenrow_ptr
         sta   <oddrow_ptr

         jmp   InputLoop

copytozp
         +COPY_TO_0 start, end
start
!pseudopc 0 {
Exit2Bit rts
evenrow_ptr
         !word evenrow_masks
oddrow_ptr
         !word oddrow_masks
InputLoop
         ldy   #0
input=*+1
         ldx   .coords               ; first value: HGR row + 1
         beq   Exit2Bit              ; if 0 then we're done
         +ROW_X_TO_2BIT_BASE_ADDRESSES src1, src2, dest1, dest2

         iny
         lda   (<input), y
         +HIGH_3_LOW_5 input

         ; main 2x2 block in left half
         clc
-        lda   copymasks2bit, x
         beq   +
src1=*+1
         lda   $FDFD, y
         eor   (<dest1), y
         and   copymasks2bit, x
         and   (<evenrow_ptr), y
         eor   (<dest1), y
dest1=*+1
         sta   $FDFD, y
src2=*+1
         lda   $FDFD, y
         eor   (<dest2), y
         and   copymasks2bit, x
         and   (<oddrow_ptr), y
         eor   (<dest2), y
dest2=*+1
         sta   $FDFD, y
+        bcs   +
         sta   $C003
         sta   $C005
         sec
         bcs   -
+        sta   $C002
         sta   $C004

         ; corresponding 2x2 block in right half (same row, opposite column)
         lda   mirror_cols, y
         tay
         clc
-        lda   mirror_copymasks2bit, x
         beq   +
         +COPY_BIT_DITHER src1, dest1, mirror_copymasks2bit, evenrow_ptr
         +COPY_BIT_DITHER src2, dest2, mirror_copymasks2bit, oddrow_ptr
+        bcs   +
         sta   $C003
         sta   $C005
         sec
         bcs   -
+        sta   $C002
         sta   $C004

next
         inc   <input
         inc   <input
         bne   +
         bit   KBD
         bmi   ++
         inc   <input+1
+        jmp   InputLoop
++       rts

}
end

next2_start
!pseudopc next {
         lda   <input
         php
         dec   <input
         dec   <input
         plp
         bne   +
         dec   <input+1
         bit   KBD
         bmi   ++
+        jmp   InputLoop
++       rts
}
next2_end
}
